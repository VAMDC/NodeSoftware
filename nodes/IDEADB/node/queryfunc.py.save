# -*- coding: utf-8 -*-
#
# This module (which must have the name queryfunc.py) is responsible
# for converting incoming queries to a database query understood by
# this particular node's database schema.
# 
# This module must contain a function setupResults, taking a sql object
# as its only argument. 
#

# library imports 

import sys
from itertools import chain
from django.conf import settings
from vamdctap.sqlparse import where2q

import dictionaries
import models # this imports models.py from the same directory as this file

from django.db.models import Q

def LOG(s):
#    "Simple logger function"
#    if settings.DEBUG: print >> sys.stdout, s
#josis logfunction
    logfilejosi = open('/var/log/vamdc_josi.log','a')
    s=str(s)
    logfilejosi.write(s + '\n')

#------------------------------------------------------------
# Main function 
#------------------------------------------------------------

def setupResults(sql, limit=1000):
    """
    This function is always called by the software.
    """
    # log the incoming query
    LOG(sql)
    LOG(sql.where)
    
    molecules=[]
    # convert the incoming sql to a correct django query syntax object 
    # based on the RESTRICTABLES dictionary in dictionaries.py
    # (where2q is a helper function to do this for us).
    q = where2q(sql.where, dictionaries.RESTRICTABLES)

    try: 
        q = eval(q) # test queryset syntax validity
    except:
        #LOG(q) 
        return {}

    # We build a queryset of database matches on the Transision model
    # since through this model (in our example) we are be able to
    # reach all other models. Note that a queryset is actually not yet
    # hitting the database, making it very efficient.
    
    #ruecks = models.Resonance.objects.filter(q)

    energyscans = models.Energyscan.objects.filter(q)
    # count the number of matches, make a simple trunkation if there are
    # too many (record the coverage in the returned header)
    nenergyscans=energyscans.count()

    for energyscan in energyscans:
        if energyscan.species.molecule == True:
            molecules = models.Species.objects.filter(Q(id__exact=energyscan.species.id)|Q(id__exact=energyscan.origin_species.id))
        else:
            atoms = models.Species.objects.filter(Q(id__exact=energyscan.species.id))
            molecules = models.Species.objects.filter(Q(id__exact=energyscan.origin_species.id))
            #for molecule in molecules:
            #    molecule.speciesID = 'test'
        energyscan.Products = models.Species.objects.filter(id__exact=energyscan.species.id)
        energyscan.Reactants = models.Species.objects.filter(id__exact=energyscan.origin_species.id)
        
        sources = models.Source.objects.filter(id__exact=energyscan.source.id)
        for source in sources:
            authorlist=[]
            for author in source.authors.all():
                authorlist.append(u'%s, %s'%(author.lastname,author.firstname))

            source.author = authorlist

    # create electron statically, as it is always involved and always the same
    class Particle:
        pass
    electron = Particle()
    electron.charge='-1'
    electron.name='electron'
    electron.speciesid='electron'
    electron.comment='low energy electrons'
    
    particles = []
    particles.append(electron)
    # Create the header with some useful info. The key names here are
    # standardized and shouldn't be changed.
    headerinfo={\
            'Truncated':1,
            'COUNT-SOURCES':1,
            'COUNT-species':nenergyscans,
            'count-states':1,
            'count-radiative':1
            }
            
    # Return the data. The keynames are standardized. 
    return {'CollTrans':energyscans,
            'Sources':sources,
            'Atoms':atoms,
            'Molecules':molecules,
            'Particles':particles,
           }
